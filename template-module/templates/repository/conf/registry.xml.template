<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  ~ Copyright 2005-2011 WSO2, Inc. (http://wso2.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<wso2registry>

    <!--
    For details on configuring different config & governance registries see;
    http://wso2.org/library/tutorials/2010/04/sharing-registry-space-across-multiple-product-instances
    -->

    <currentDBConfig>wso2registry</currentDBConfig>
    <readOnly>false</readOnly>
    <enableCache>true</enableCache>
    <registryRoot>/</registryRoot>

    <dbConfig name="wso2registry">
        <dataSource>jdbc/WSO2CarbonDB</dataSource>
    </dbConfig>

    {% if CONFIG_PARAM_REGISTRY_DB_URL is defined -%}
    <dbConfig name="governance">
        <dataSource>jdbc/WSO2RegistryDB</dataSource>
    </dbConfig>

    <remoteInstance url="https://localhost:9443/registry">
        <id>governance</id>
        <dbConfig>governance</dbConfig>
    {% if CONFIG_PARAM_SUB_DOMAIN is defined -%}
        {% if CONFIG_PARAM_SUB_DOMAIN == 'worker' -%}
        <readOnly>true</readOnly>
        {% else -%}
        <readOnly>false</readOnly>
        {%  endif -%}
    {%  else -%}
        <readOnly>false</readOnly>
    {%  endif -%}
        <enableCache>true</enableCache>
        <registryRoot>/</registryRoot>
        <cacheId>{{CONFIG_PARAM_REGISTRY_DB_USER_NAME}}@{{CONFIG_PARAM_REGISTRY_DB_URL}}</cacheId>
    </remoteInstance>
    
    <mount path="/_system/governance" overwrite="true">
        <instanceId>governance</instanceId>
        <targetPath>/_system/governance</targetPath>
    </mount>
    {% endif -%}

    {% if CONFIG_PARAM_CONFIG_DB_URL is defined -%}
    <dbConfig name="config">
 	<dataSource>jdbc/WSO2ConfigDB</dataSource>
    </dbConfig>

    <remoteInstance url="https://localhost:9443/registry">
        <id>config</id>
        <dbConfig>config</dbConfig>
     {% if CONFIG_PARAM_SUB_DOMAIN is defined -%}
        {% if CONFIG_PARAM_SUB_DOMAIN == 'worker' -%}
        <readOnly>true</readOnly>
        {% else -%}
        <readOnly>false</readOnly>
        {%  endif -%}
    {%  else -%}
        <readOnly>false</readOnly>
    {%  endif -%}
        <registryRoot>/</registryRoot>
 	<enableCache>true</enableCache>
        <cacheId>{{CONFIG_PARAM_CONFIG_DB_USER_NAME}}@{{CONFIG_PARAM_CONFIG_DB_URL}}</cacheId>
    </remoteInstance>

    <mount path="/_system/config" overwrite="true">
        <instanceId>config</instanceId>
        <targetPath>/_system/config</targetPath>
    </mount>
    {% endif -%}


    {% if CONFIG_PARAM_PROFILE == 'KeyManager' -%}

        <handler class="org.wso2.carbon.registry.extensions.handlers.ExtensionsSymLinkHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                <property name="pattern">.*</property>
            </filter>
        </handler>

        <!-- This handler provides resource retention locking for the resources -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.RetentionHandler"
                methods="PUT,DELETE,MOVE,RENAME,IMPORT,COPY,ADD_ASSOCIATION,REMOVE_ASSOCIATION,RESTORE,RESTORE_VERSION">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                <property name="pattern">.*</property>
            </filter>
        </handler>

        <handler class="org.wso2.carbon.identity.entitlement.policy.finder.registry.RegistryPolicyHandler">
    	<filter class="org.wso2.carbon.identity.entitlement.policy.finder.registry.RegistryPolicyMediaTypeMatcher">
    		<property name="mediaType">application/xacml-policy+xml</property>
    	</filter>
        </handler>


        <!-- This handler process the uploaded  WSDL files -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.WSDLMediaTypeHandler">
            <!--property name="createService">false</property>
            <property name="disableWSDLValidation">true</property-->
            <property name="disableSymlinkCreation">true</property>
            <property name="schemaLocationConfiguration" type="xml">
                <location>/trunk/schemas/</location>
    	</property>
            <property name="wsdlLocationConfiguration" type="xml">
                <location>/trunk/wsdls/</location>
    	</property>
            <property name="policyLocationConfiguration" type="xml">
                <location>/trunk/policies/</location>
    	</property>

            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/wsdl+xml</property>
            </filter>
        </handler>

        <!-- This handler processes .zip & .gar files being added to the registry -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.ZipWSDLMediaTypeHandler">
            <property name="wsdlMediaType">application/wsdl+xml</property>
            <property name="schemaMediaType">application/xsd+xml</property>
            <property name="threadPoolSize">50</property>
            <property name="disableSymlinkCreation">true</property>
            <!--property name="createService">false</property>
    	    <property name="useOriginalSchema">true</property>
            <property name="disableWSDLValidation">true</property>
            <property name="disableSchemaValidation">true</property>
            <property name="wsdlExtension">.wsdl</property>
            <property name="schemaExtension">.xsd</property>
            <property name="archiveExtension">.gar</property>
            <property name="tempFilePrefix">wsdl</property-->
            <property name="numberOfRetry">3</property>
            <property name="schemaLocationConfiguration" type="xml">
                <location>/trunk/schemas/</location>
            </property>
            <property name="wsdlLocationConfiguration" type="xml">
                <location>/trunk/wsdls/</location>
            </property>
    	<filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.wso2.governance-archive</property>
            </filter>
        </handler>

        <!-- This handler processes the services being added to the registry -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.ServiceMediaTypeHandler">
            <!--property name="disableWSDLValidation">true</property-->
            <property name="defaultServiceVersion">1.0.0-SNAPSHOT</property>
            <property name="disableSymlinkCreation">true</property>
            <property name="smartLifecycleLinks" type="xml">
                <key>dev</key>
                <key>qa</key>
                <key>live</key>
            </property>
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.wso2-service+xml</property>
            </filter>
        </handler>

        <!-- This handler provides the ability to remove the entire heirarchy for a given service while deleting the service -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteHierarchyHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.wso2-service+xml</property>
            </filter>
        </handler>


       <!--This handler delete the subscription hierarcy generated in the notifications path when a subscription is deleted directly -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteHierarchyHandler">
             <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                    <property name="deletePattern">/_system/governance/event/topics/registry/notifications/.*</property>
             </filter>
        </handler>


        <!-- This handler processes the links for the lifecycle -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.SmartLifecycleLinkHandler">
            <property name="states" type="xml">
                <state key="dev">Created</state>
                <state key="qa">Tested</state>
                <state key="live">Deployed</state>
            </property>
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.wso2-smart-link</property>
            </filter>
        </handler>

        <!-- This handler processes the policy files of the given media type defined by the filter -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.PolicyMediaTypeHandler">
    	<property name="policyLocationConfiguration" type="xml">
                <location>/trunk/policies/</location>
    	</property>
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/policy+xml</property>
            </filter>
        </handler>

        <!-- This handler processes the schema types which are defined by the filter  -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.XSDMediaTypeHandler">
            <!--property name="disableSchemaValidation">true</property-->
            <property name="disableSymlinkCreation">true</property>
            <property name="locationConfiguration" type="xml">
                <location>/trunk/schemas/</location>
            </property>
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/x-xsd+xml</property>
            </filter>
        </handler>

        <!-- This handler processes making an external link to a given resource -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.ExternalLinkHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
                <property name="mediaType">application/vnd.wso2-hyperlink</property>
            </filter>
        </handler>

        <!-- This handler processes service end-points defined in the WSDL files being uploaded to the registry -->

        <handler class="org.wso2.carbon.registry.extensions.handlers.EndpointMediaTypeHandler">
            <property name="endpointMediaType">application/vnd.wso2.endpoint</property>
            <property name="endpointLocationConfiguration" type="xml">
                <location>/trunk/endpoints/</location>
            </property>
            <filter class="org.wso2.carbon.registry.extensions.filters.EndpointMediaTypeMatcher">
            </filter>
        </handler>

        <handler class="org.wso2.carbon.governance.registry.extensions.handlers.UriMediaTypeHandler">
    	<filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
    	    <property name="mediaType">application/vnd.wso2-uri+xml</property>
    	</filter>
        </handler>

        <!-- When a resource/governance artifact is deleted, this handler will cleanup all its bounded subscriptions from registry-->

        <handler class="org.wso2.carbon.registry.extensions.handlers.DeleteSubscriptionHandler">
             <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                     <property name="pattern">.*</property>
             </filter>
        </handler>

        <!--This handler manage the meta data resource caching-->
        <handler class="org.wso2.carbon.governance.registry.extensions.handlers.MetaDataCacheHandler">
            <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.URLMatcher">
                <property name="pattern">.*</property>
            </filter>
        </handler>

        <!--This handler clears the caches when workflow-extension config is updated.-->
       <handler class="org.wso2.carbon.apimgt.impl.handlers.APIConfigMediaTypeHandler" methods="PUT,DELETE">
          <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
            <property name="mediaType">workflow-config</property>
        </filter>
       </handler>

    {% else -%}
        <handler class="org.wso2.carbon.identity.entitlement.policy.finder.registry.RegistryPolicyHandler">
            <filter class="org.wso2.carbon.identity.entitlement.policy.finder.registry.RegistryPolicyMediaTypeMatcher">
                <property name="mediaType">application/xacml-policy+xml</property>
            </filter>
        </handler>

        <!--<handler class="org.wso2.carbon.registry.extensions.handlers.SynapseRepositoryHandler">
           <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
               <property name="mediaType">application/vnd.apache.synapse</property>
           </filter>
       </handler>

       <handler class="org.wso2.carbon.registry.extensions.handlers.SynapseRepositoryHandler">
           <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
               <property name="mediaType">application/vnd.apache.esb</property>
           </filter>
       </handler>

       <handler class="org.wso2.carbon.registry.extensions.handlers.Axis2RepositoryHandler">
           <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
               <property name="mediaType">application/vnd.apache.axis2</property>
           </filter>
       </handler>

       <handler class="org.wso2.carbon.registry.extensions.handlers.Axis2RepositoryHandler">
           <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
               <property name="mediaType">application/vnd.apache.wsas</property>
           </filter>
       </handler>

       <handler class="org.wso2.carbon.registry.extensions.handlers.WSDLMediaTypeHandler">
           <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
               <property name="mediaType">application/wsdl+xml</property>
           </filter>
       </handler>

       <handler class="org.wso2.carbon.registry.extensions.handlers.XSDMediaTypeHandler">
           <filter class="org.wso2.carbon.registry.core.jdbc.handlers.filters.MediaTypeMatcher">
               <property name="mediaType">application/x-xsd+xml</property>
           </filter>
       </handler> -->
    {% endif -%}



    <!--remoteInstance url="https://localhost:9443/registry">
        <id>instanceid</id>
        <username>username</username>
        <password>password</password>
    </remoteInstance-->

    <!--remoteInstance url="https://localhost:9443/registry">
        <id>instanceid</id>
        <dbConfig>wso2registry</dbConfig>
        <readOnly>false</readOnly>
        <enableCache>true</enableCache>
        <registryRoot>/</registryRoot>
    </remoteInstance-->

    <!--mount path="/_system/config" overwrite="true|false|virtual">
        <instanceId>instanceid</instanceId>
        <targetPath>/_system/nodes</targetPath>
    </mount-->

    {% if CONFIG_PARAM_PROFILE == 'KeyManager' -%}
    <!-- This defines index configuration which is used in meta data search feature of the registry -->
    <indexingConfiguration>
            <startingDelayInSeconds>60</startingDelayInSeconds>
            <indexingFrequencyInSeconds>2</indexingFrequencyInSeconds>
            <!--number of resources submit for given indexing thread -->
            <batchSize>50</batchSize>
            <!--number of worker threads for indexing -->
            <indexerPoolSize>10</indexerPoolSize>
            <!-- location storing the time the indexing took place-->
            <lastAccessTimeLocation>/_system/local/repository/components/org.wso2.carbon.registry/indexing/lastaccesstime</lastAccessTimeLocation>
            <!-- the indexers that implement the indexer interface for a relevant media type/(s) -->
            <indexers>
                <!--indexer class="org.wso2.carbon.registry.indexing.indexer.MSExcelIndexer" mediaTypeRegEx="application/vnd.ms-excel"/>
                <indexer class="org.wso2.carbon.registry.indexing.indexer.MSPowerpointIndexer" mediaTypeRegEx="application/vnd.ms-powerpoint"/>
                <indexer class="org.wso2.carbon.registry.indexing.indexer.MSWordIndexer" mediaTypeRegEx="application/msword"/>
                <indexer class="org.wso2.carbon.registry.indexing.indexer.PDFIndexer" mediaTypeRegEx="application/pdf"/>
                <indexer class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/xml"/-->
                <!--indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/wsdl\+xml" profiles ="default,api-store,api-publisher"/>
                <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/x-xsd\+xml " profiles ="default,api-store,api-publisher"/>
                <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/policy\+xml" profiles ="default,api-store,api-publisher"/-->
                <indexer class="org.wso2.carbon.governance.registry.extensions.indexers.RXTIndexer" mediaTypeRegEx="application/vnd.(.)+\+xml" profiles ="default,api-store,api-publisher"/>
                <!--indexer class="org.wso2.carbon.registry.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/(.)+\+xml"/>
                <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="text/(.)+"/>
                <indexer class="org.wso2.carbon.registry.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="application/x-javascript"/-->
    	    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.PlainTextIndexer" mediaTypeRegEx="text/plain+" profiles ="default,api-store,api-publisher"/>
    	    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.PDFIndexer" mediaTypeRegEx="application/pdf" profiles ="default,api-store,api-publisher"/>
    	    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.MSWordIndexer" mediaTypeRegEx="application/msword" profiles ="default,api-store,api-publisher"/>
    	    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.MSPowerpointIndexer" mediaTypeRegEx="application/vnd.ms-powerpoint" profiles ="default,api-store,api-publisher"/>
    	    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.MSExcelIndexer" mediaTypeRegEx="application/vnd.ms-excel" profiles ="default,api-store,api-publisher"/>
    	    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.XMLIndexer" mediaTypeRegEx="application/xml" profiles ="default,api-store,api-publisher"/>
        	    <indexer class="org.wso2.carbon.apimgt.impl.indexing.indexer.WSDLIndexer" mediaTypeRegEx="application/api-wsdl" profiles ="default,api-store,api-publisher"/>
            </indexers>
            <exclusions>
                <exclusion pathRegEx="/_system/config/repository/dashboards/gadgets/swfobject1-5/.*[.]html"/>
                <exclusion pathRegEx="/_system/local/repository/components/org[.]wso2[.]carbon[.]registry/mount/.*"/>
            </exclusions>
    </indexingConfiguration>
    {% endif -%}

    <versionResourcesOnChange>true</versionResourcesOnChange>

    <!-- NOTE: You can edit the options under "StaticConfiguration" only before the
     startup. -->
    <staticConfiguration>
        <versioningProperties>true</versioningProperties>
        <versioningComments>true</versioningComments>
        <versioningTags>true</versioningTags>
        <versioningRatings>true</versioningRatings>

        {% if CONFIG_PARAM_PROFILE == 'KeyManager' -%}
        <!-- Location you want to add service and default location will be /services/ -->
        <servicePath>/trunk/services/</servicePath>
        {% endif -%}
    </staticConfiguration>

    {% if CONFIG_PARAM_PROFILE == 'KeyManager' -%}
    <!-- This enables auto-versioning of resources (non-collection). Whenever a resource is updated a new version will be created -->

    <versionResourcesOnChange>false</versionResourcesOnChange>

    <!-- This enables JMX management for G-Reg -->

    <jmx enabled="false">
        <service name="InvocationStatistics" enabled="true"/>
        <service name="Activities" enabled="true"/>
        <service name="Properties" enabled="true"/>
        <service name="Subscriptions" enabled="true"/>
        <service name="Events" enabled="true"/>
    </jmx>
    {% endif -%}

</wso2registry>